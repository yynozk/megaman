class Map
  Image.register(:tileset, "data/cutman_stage_tile.png")

  MAP_WIDTH, MAP_HEIGHT = 48, 14
  TILE_WIDTH, TILE_HEIGHT, TILE_COUNT, TILE_COLUMNS = 32, 32, 36, 9
  MAP_CSV = [
    10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    10,10,10,10,10,10,10,26,27,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    10,10,10,10,10,10,10,35,36,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    15,15,15,15,15,11,15,15,15,15,11,15,10,10,15,15,10,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    13,13,13,13,13,11,13,13,10,10,11,10,10,10,10,10,10,10,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    16,16,16,14,14,11,8,14,10,10,26,27,10,10,10,10,10,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    17,17,17,14,14,11,14,14,10,10,35,36,10,10,10,10,10,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    8,14,2,14,14,11,14,14,26,27,26,27,10,10,10,10,10,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    14,14,14,14,14,11,14,8,35,36,35,36,10,10,10,10,10,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  ]

  def self.create
    MapTile.init(Image[:tileset], TILE_COLUMNS, TILE_COUNT / TILE_COLUMNS)

    tiles = []
    MAP_CSV.each_with_index do |v, i|
      next if v == 0
      tiles << MapTile.new(i % MAP_WIDTH, (i / MAP_WIDTH).floor, v - 1)
    end

    self.new(tiles)
  end


  attr_reader :tiles

  def initialize(tiles)
    @tiles = tiles
  end

  def scroll(offset)
    @tiles.map.each {|t| t.scroll(offset) }
  end
end
